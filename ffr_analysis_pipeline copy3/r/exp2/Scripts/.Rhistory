ggsave(
plot = plot_obj,
filename = file.path(output_path, paste0(filename, ".png")),
device = "png", dpi = 300, width = width, height = height, units = "cm"
)
# Save as TIFF
ggsave(
plot = plot_obj,
filename = file.path(output_path, paste0(filename, ".tiff")),
device = "tiff", dpi = 1200, width = width, height = height, units = "cm"
)
}
# Prepare F0 growth data
f0_growth_data <- snr_data %>%
filter(harmonic == "F0", run == "Run1") %>%
group_by(condition, iteration) %>%
calculate_confidence_intervals(data_value) %>%
add_time_columns()
# Create F0 recording time growth plot
f0_recording_plot <- create_growth_plot(
f0_growth_data,
recording_time_mins,
"Elapsed Time (mins)"
)
# Create F0 stimulation time growth plot
f0_stimulation_plot <- create_growth_plot(
f0_growth_data,
stimulation_time_mins,
"Stimulation Time (mins)"
)
# Combine plots
f0_combined_plot <- ggarrange(
f0_recording_plot, f0_stimulation_plot,
labels = c("A", "B"),
common.legend = TRUE,
legend = "bottom",
ncol = 2
)
# Display plots
f0_recording_plot
f0_stimulation_plot
f0_combined_plot
# Prepare harmonics growth data
harmonics_growth_data <- snr_data %>%
filter(harmonic %in% HARMONICS_OF_INTEREST, run == "Run1") %>%
group_by(condition, iteration, harmonic) %>%
calculate_confidence_intervals(data_value) %>%
add_time_columns()
# Create harmonics recording time plot
harmonics_recording_plot <- harmonics_growth_data %>%
ggplot(aes(x = recording_time_mins, y = mean_value,
group = condition, color = condition)) +
geom_smooth(aes(ymin = ci_lower, ymax = ci_upper, fill = condition),
stat = "identity") +
scale_x_continuous(name = "Elapsed Time (mins)") +
scale_y_continuous(name = "SNR (dB)") +
facet_wrap(~harmonic) +
theme_bw()
# Create harmonics stimulation time plot
harmonics_stimulation_plot <- harmonics_growth_data %>%
ggplot(aes(x = stimulation_time_mins, y = mean_value,
group = condition, color = condition)) +
geom_smooth(aes(ymin = ci_lower, ymax = ci_upper, fill = condition),
stat = "identity") +
scale_x_continuous(name = "Stimulation Time (mins)") +
scale_y_continuous(name = "SNR (dB)") +
facet_wrap(~harmonic) +
theme_bw()
harmonics_recording_plot
harmonics_stimulation_plot
# Prepare matched data for boxplot
matched_data <- snr_data %>%
filter(
harmonic %in% HARMONICS_OF_INTEREST,
run == "Run1",
(condition == "Rapid" & iteration == 100) |
(condition == "Conv" & recording_time == matched_recording_time)
)
# Create boxplot
boxplot_matched <- ggplot(matched_data,
aes(x = harmonic, y = data_value, fill = condition)) +
geom_boxplot(width = 0.5, outlier.shape = NA) +
geom_jitter(color = "black", size = 0.7, alpha = 0.3,
position = position_jitterdodge(jitter.width = 0.01)) +
scale_x_discrete(name = "Harmonic") +
scale_y_continuous(name = "SNR (dB)") +
theme_bw()
# Generate summary statistics
summary_stats <- matched_data %>%
group_by(harmonic, condition) %>%
summarise(
mean_snr = mean(data_value, na.rm = TRUE),
sd_snr = sd(data_value, na.rm = TRUE),
n = n(),
.groups = "drop"
)
boxplot_matched
summary_stats
# Prepare correlation data
correlation_data <- signal_data %>%
filter(
run          == "Run1",
iteration    == 100,
signal_noise == "Signal",
harmonic %in% HARMONICS_OF_INTEREST
) %>%
select(listener, condition, harmonic, data_value) %>%
pivot_wider(names_from = condition, values_from = data_value)
# Calculate summary statistics for plot
signal_summary_stats <- correlation_data %>%
group_by(harmonic) %>%
summarise(
sd_conv = sd(Conv, na.rm = TRUE),
sd_rapid = sd(Rapid, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(label = paste0(round(sd_conv, 3), "/", round(sd_rapid, 3)))
# Create basic correlation plot
correlation_plot_basic <- correlation_data %>%
ggplot(aes(x = Rapid, y = Conv)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, slope = 1, color = "grey",
linetype = "dashed", size = 0.5) +
scale_x_continuous(name = "Rapid FFR Signal Amplitude (μV RMS)") +
scale_y_continuous(name = "Conventional FFR Signal Amplitude (μV RMS)") +
facet_wrap(~harmonic) +
theme_bw()
# Create enhanced quadratic correlation plot
correlation_plot_enhanced <- correlation_data %>%
ggplot(aes(x = Rapid, y = Conv)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, slope = 1, color = "grey",
linetype = "dashed", size = 0.5) +
scale_x_continuous(name = "Rapid FFR Signal Amplitude (μV RMS)",
limits = c(0, 0.22)) +
scale_y_continuous(name = "Conventional FFR Signal Amplitude (μV RMS)",
limits = c(0, 0.22)) +
geom_text(data = tibble(harmonic = HARMONICS_OF_INTEREST),
aes(x = 0.01, y = 0.2, label = harmonic),
hjust = 0, vjust = 0, inherit.aes = FALSE, size = 3) +
geom_text(data = signal_summary_stats,
aes(x = 0.135, y = 0.01, label = label),
hjust = 0, vjust = 0, inherit.aes = FALSE, size = 2) +
facet_wrap(~harmonic) +
theme_bw() +
theme(
aspect.ratio = 1,
axis.text.x = element_text(size = 7),
strip.text.x = element_blank()
)
correlation_plot_basic
correlation_plot_enhanced
# Function to create test-retest data
create_test_retest_data <- function(data, condition_filter, time_filter = NULL) {
filtered_data <- data %>%
filter(
harmonic %in% HARMONICS_OF_INTEREST,
condition == condition_filter,
signal_noise == "Signal"
)
if (!is.null(time_filter)) {
filtered_data <- filtered_data %>%
filter(recording_time == time_filter)
}else{
filtered_data <- filtered_data %>%
filter(iteration == 100)
}
filtered_data %>%
select(listener, run, harmonic, data_value) %>%
pivot_wider(names_from = run, values_from = data_value)
}
# Function to create test-retest plot
create_test_retest_plot <- function(data, x_label, y_label) {
data %>%
ggplot(aes(x = Run1, y = Run2)) +
geom_point() +
geom_smooth(method = "lm") +
geom_abline(intercept = 0, slope = 1, color = "grey",
linetype = "dashed", size = 0.5) +
scale_x_continuous(name = x_label) +
scale_y_continuous(name = y_label) +
geom_text(data = tibble(harmonic = HARMONICS_OF_INTEREST),
aes(x = 0.01, y = 0.2, label = harmonic),
hjust = 0, vjust = 0, inherit.aes = FALSE, size = 3) +
facet_wrap(~harmonic) +
theme_bw() +
theme(
aspect.ratio = 1,
axis.text.x = element_text(size = 7),
strip.text.x = element_blank()
)
}
# Create Rapid test-retest data and plot
rapid_test_retest_data <- create_test_retest_data(signal_data, "Rapid")
rapid_test_retest_plot <- create_test_retest_plot(
rapid_test_retest_data,
"Run 1 Rapid FFR Signal Amplitude (μV RMS)",
"Run 2 Rapid FFR Signal Amplitude (μV RMS)"
)
# Create Conventional test-retest data and plot (time-matched)
conv_test_retest_data <- create_test_retest_data(
signal_data, "Conv", matched_recording_time
)
conv_test_retest_plot <- create_test_retest_plot(
conv_test_retest_data,
"Run 1 Conv FFR Signal Amplitude (μV RMS)",
"Run 2 Conv FFR Signal Amplitude (μV RMS)"
)
# Create combined test-retest plot
x_axis_ticks <- c(0.0, 0.05, 0.1, 0.15, 0.2)
combined_test_retest_plot <- ggarrange(
rapid_test_retest_plot +
scale_x_continuous(labels = x_axis_ticks,
name = "Run 1 Rapid FFR Signal Amplitude (μV RMS)"),
conv_test_retest_plot +
scale_x_continuous(labels = x_axis_ticks,
name = "Run 1 Conv FFR Signal Amplitude (μV RMS)"),
labels = c("A", "B"),
common.legend = TRUE,
legend = "bottom",
ncol = 2
)
rapid_test_retest_plot
conv_test_retest_plot
combined_test_retest_plot
# List of plots to save with their corresponding names and dimensions
plots_to_save <- list(
list(plot = f0_recording_plot, name = "F0RecordingTimeGrowthPlot",
width = 20, height = 10),
list(plot = f0_stimulation_plot, name = "F0StimulationTimeGrowthPlot",
width = 20, height = 10),
list(plot = f0_combined_plot, name = "F0GrowthPlot",
width = 20, height = 10),
list(plot = harmonics_recording_plot, name = "HarmonicsSNRRecordingTimeGrowthPlotMean",
width = 20, height = 10),
list(plot = harmonics_stimulation_plot, name = "HarmonicsSNRStimulationTimeGrowthPlotMean",
width = 20, height = 10),
list(plot = boxplot_matched, name = "BoxplotMatchedRecordingTime",
width = 20, height = 10),
list(plot = correlation_plot_enhanced, name = "CorrSignalRapidConvQuadratic",
width = 12, height = 12),
list(plot = rapid_test_retest_plot, name = "RapidSignalRun1Run2",
width = 12, height = 12),
list(plot = conv_test_retest_plot, name = "ConvSignalRun1Run2Matched",
width = 12, height = 12),
list(plot = combined_test_retest_plot, name = "TestRetestPlot",
width = 24, height = 12)
)
# Save all plots using lapply instead of manual repetition
lapply(plots_to_save, function(plot_info) {
save_plot_both_formats(
plot_info$plot,
plot_info$name,
plot_info$width,
plot_info$height
)
})
cat("All plots saved successfully to:", output_path, "\n")
# Print session information for reproducibility
sessionInfo()
# Clear workspace for clean start
rm(list = ls())
# Set chunk options for consistent output
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Load required libraries with error handling
required_packages <- c("tidyverse")
lapply(required_packages, function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
})
# Configuration constants
ALPHA_VALUE    <- 0.6
DPI_HIGH_RES   <- 1200
DPI_STANDARD   <- 300
PLOT_WIDTH_CM  <- 20
PLOT_HEIGHT_CM <- 10
# Define harmonic levels for consistent ordering
TARGET_HARMONICS <- c('F0', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7')
# File paths (consider using here::here() package for better path management)
DATA_PATH   <- "/Users/jonas/Documents/R-Studio/Tim Data/4GitHub/Exp2/Data"
OUTPUT_PATH <- "/Users/jonas/Documents/R-Studio/Tim Data/4GitHub/Exp2/Plots"
# Helper function to load and clean EEG data
load_and_clean_eeg_data <- function(file_path) {
data <- read_csv(file_path, show_col_types = FALSE) %>%
mutate(
data_value = as.numeric(data_value),
listener_id = as.factor(listener)
)
return(data)
}
# Helper function to filter data for target harmonics
filter_target_harmonics <- function(data, harmonics = TARGET_HARMONICS) {
data %>% filter(harmonic %in% harmonics)
}
# Helper function to create base plot theme
create_base_theme <- function() {
theme_bw() +
theme(
panel.grid.minor = element_blank()
)
}
# Helper function to save plots in multiple formats
save_plot_multiple_formats <- function(plot_object, filename, output_dir = OUTPUT_PATH) {
base_path <- file.path(output_dir, filename)
# Save as PNG (standard resolution)
ggsave(
plot = plot_object,
filename = paste0(base_path, ".png"),
device = "png",
dpi = DPI_STANDARD,
width = PLOT_WIDTH_CM,
height = PLOT_HEIGHT_CM,
units = "cm"
)
# Save as TIFF (high resolution)
ggsave(
plot = plot_object,
filename = paste0(base_path, ".tiff"),
device = "tiff",
dpi = DPI_HIGH_RES,
width = PLOT_WIDTH_CM,
height = PLOT_HEIGHT_CM,
units = "cm"
)
}
# Load EEG data files
eeg_snr_data    <- load_and_clean_eeg_data(file.path(DATA_PATH, "SNRChunksMatrixClean.csv"))
eeg_signal_data <- load_and_clean_eeg_data(file.path(DATA_PATH, "SignalChunksMatrixClean.csv"))
# Load prediction data
eeg_snr_predictions    <- load_and_clean_eeg_data(file.path(DATA_PATH, "SNRChunksMatrixPred.csv"))
eeg_signal_predictions <- load_and_clean_eeg_data(file.path(DATA_PATH, "SignalChunksMatrixPred.csv"))
cat("Data loaded successfully:\n")
cat("- SNR data:", nrow(eeg_snr_data), "observations\n")
cat("- Signal data:", nrow(eeg_signal_data), "observations\n")
cat("- SNR predictions:", nrow(eeg_snr_predictions), "observations\n")
cat("- Signal predictions:", nrow(eeg_signal_predictions), "observations\n")
# Create SNR summary plot across chunks
snr_summary_plot <- eeg_snr_data %>%
# filter_target_harmonics() %>%
ggplot(aes(x = as.factor(chunk), y = data_value)) +
geom_boxplot(width = 0.5, outlier.alpha = 0.6) +
scale_x_discrete("Chunk") +
scale_y_continuous("SNR (dB)") +
facet_wrap(~harmonic) +
create_base_theme() +
labs(title = "SNR Distribution Across Chunks by Harmonic")
# Create signal amplitude summary plot
signal_summary_plot <- eeg_signal_data %>%
# filter_target_harmonics() %>%
filter(signal_noise == "Signal") %>%
ggplot(aes(x = as.factor(chunk), y = data_value)) +
geom_boxplot(width = 0.5, outlier.alpha = 0.6) +
scale_x_discrete("Chunk") +
scale_y_continuous("Signal Amplitude (μV RMS)") +
facet_wrap(~harmonic) +
create_base_theme() +
labs(title = "Signal Amplitude Distribution Across Chunks by Harmonic")
# Display plots
snr_summary_plot
signal_summary_plot
# Create SNR plot with predictions overlay
snr_prediction_plot <- eeg_snr_predictions %>%
filter_target_harmonics() %>%
ggplot(aes(x = as.factor(chunk), y = data_value)) +
geom_boxplot(width = 0.5, outlier.alpha = 0.6) +
geom_line(
aes(x = as.numeric(chunk), y = predicted_values),
size = 1,
color = 'red',
alpha = ALPHA_VALUE,
group = 1
) +
scale_x_discrete("Chunk") +
scale_y_continuous("SNR (dB)") +
facet_wrap(~harmonic) +
create_base_theme()
# + labs(
#   title = "SNR with Model Predictions",
#   subtitle = "Red line shows predicted values"
# )
# Create signal amplitude plot with predictions
signal_prediction_plot <- eeg_signal_predictions %>%
filter_target_harmonics() %>%
ggplot(aes(x = as.factor(chunk), y = data_value)) +
geom_boxplot(width = 0.5, outlier.alpha = 0.6) +
geom_line(
aes(x = as.numeric(chunk), y = predicted_values),
size = 1,
color = 'red',
alpha = ALPHA_VALUE,
group = 1
) +
scale_x_discrete("Chunk") +
scale_y_continuous("Signal Amplitude (μV RMS)") +
facet_wrap(~harmonic) +
create_base_theme()
# + labs(
#   title = "Signal Amplitude with Model Predictions",
#   subtitle = "Red line shows predicted values"
# )
# Display plots
snr_prediction_plot
signal_prediction_plot
# Create individual participant trajectory plots
individual_snr_plot <- eeg_snr_data %>%
# filter_target_harmonics() %>%
ggplot(aes(x = chunk, y = data_value, color = listener, group = listener)) +
geom_line(alpha = 0.7) +
scale_x_continuous("Chunk") +
scale_y_continuous("SNR (dB)") +
facet_wrap(~harmonic, scales = "free_y") +
create_base_theme() +
labs(
title = "Individual Participant SNR Trajectories",
color = "Listener ID"
) +
theme(legend.position = "none")  # Remove legend due to many participants
individual_signal_plot <- eeg_signal_data %>%
# filter_target_harmonics() %>%
filter(signal_noise == "Signal") %>%
ggplot(aes(x = chunk, y = data_value, color = listener, group = listener)) +
geom_line(alpha = 0.7) +
scale_x_continuous("Chunk") +
scale_y_continuous("Signal Amplitude (μV RMS)") +
facet_wrap(~harmonic, scales = "free_y") +
create_base_theme() +
labs(
title = "Individual Participant Signal Amplitude Trajectories",
color = "Listener ID"
) +
theme(legend.position = "none")
# Display plots
individual_snr_plot
individual_signal_plot
# Create function to generate plots for participant subgroups
create_participant_subgroup_plots <- function(data, plot_type = "SNR", n_groups = 5) {
# Get unique participants and create groups
unique_participants    <- unique(data$listener)
n_participants         <- length(unique_participants)
participants_per_group <- ceiling(n_participants / n_groups)
# Create participant groupings
participant_groups <- split(
unique_participants,
ceiling(seq_along(unique_participants) / participants_per_group)
)
# Generate plots for each group using map instead of for loop
plots <- map(seq_along(participant_groups), function(group_idx) {
current_participants <- participant_groups[[group_idx]]
filtered_data <- data %>%
# filter_target_harmonics() %>%
filter(listener %in% current_participants)
# Add signal filtering for signal plots
if (plot_type == "Signal") {
filtered_data <- filtered_data %>% filter(signal_noise == "Signal")
}
# Create plot
plot <- filtered_data %>%
ggplot(aes(x = chunk, y = data_value, color = listener, group = listener)) +
geom_line(size = 0.8, alpha = 0.8) +
scale_x_continuous("Chunk") +
scale_y_continuous(
name = if(plot_type == "SNR") "SNR (dB)" else "Signal Amplitude (μV RMS)"
) +
facet_wrap(~harmonic) +
create_base_theme() +
labs(
title = paste("Participant Group", group_idx, "-", plot_type, "Trajectories"),
color = "Listener ID"
)
return(plot)
})
# Set names for the plots
names(plots) <- paste0("participant_group_", plot_type, "_", seq_along(plots))
return(plots)
}
# Generate subgroup plots
snr_subgroup_plots <- create_participant_subgroup_plots(eeg_snr_data, "SNR")
signal_subgroup_plots <- create_participant_subgroup_plots(eeg_signal_data, "Signal")
# Display first plot from each set as example
snr_subgroup_plots[[1]]
signal_subgroup_plots[[1]]
# Create list of main plots to save
main_plots <- list(
"ChunksSNRPlot"        = snr_summary_plot,
"ChunksSignalPlot"     = signal_summary_plot,
"ChunksSNRPlotPred"    = snr_prediction_plot,
"ChunksSignalPlotPred" = signal_prediction_plot,
"IndChunksSNRPlot"     = individual_snr_plot,
"IndChunksSignalPlot"  = individual_signal_plot
)
# Save main plots
cat("Saving main plots...\n")
iwalk(main_plots, ~ {
save_plot_multiple_formats(.x, .y)
cat("Saved:", .y, "\n")
})
# Save subgroup plots
cat("Saving subgroup plots...\n")
iwalk(snr_subgroup_plots, ~ {
save_plot_multiple_formats(.x, .y)
cat("Saved:", .y, "\n")
})
iwalk(signal_subgroup_plots, ~ {
save_plot_multiple_formats(.x, .y)
cat("Saved:", .y, "\n")
})
cat("All plots saved successfully to:", OUTPUT_PATH, "\n")
sessionInfo()
